{"version":3,"sources":["components/Header/logo.png","components/Restaurant/Button/fork.svg","components/Restaurant/Details/google.svg","components/Header/Header.jsx","components/Restaurant/Button/Button.jsx","components/Restaurant/Details/Details.jsx","components/Restaurant/Restaurant.jsx","components/Spinner/Spinner.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","Button","props","isRunning","onClick","handleClick","iconFork","Details","price","Array","parseInt","details","fill","type","href","maps_url","MapsIcon","role","aria-label","Restaurant","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedRestaurant","slider","slickPause","slickPlay","setState","index","restaurants","_this$props$restauran","title","text","url","_this2","settings","infinite","speed","autoplay","autoplaySpeed","draggable","pauseOnHover","arrows","accessibility","beforeChange","_","next","updateRestaurant","lib_default","assign","ref","map","restaurant","key","Restaurant_Button_Button","Restaurant_Details_Details","React","Component","Spinner","Footer","App","array","newArray","length","randomIndex","Math","floor","random","push","splice","Prismic","getApi","then","api","query","Predicates","at","response","restaurantData","results","res","data","shuffleArray","components_Header_Header","components_Restaurant_Restaurant","components_Spinner_Spinner","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a05418bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d69e26f2.png\";","module.exports = __webpack_public_path__ + \"static/media/fork.8bab732c.svg\";","module.exports = __webpack_public_path__ + \"static/media/google.9367e4e3.svg\";","import React from 'react'\n\nimport logo from './logo.png'\n\nimport './Header.css'\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>\n        OÃ¹ manger Ã \n        <img className=\"logo\" src={logo} alt=\"logo zenika\" /> ?\n      </h1>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types';\n\nimport iconFork from './fork.svg'\n\nimport './Button.css'\n\nfunction Button(props) {\n  if (!props.isRunning) return null\n\n  return (\n    <button className=\"button-stop\" onClick={props.handleClick}>\n      <img className=\"button-icon\" src={iconFork} alt=\"forkIcon\" />\n    </button>\n  )\n}\n\nButton.propTypes = {\n  isRunning: PropTypes.bool,\n  handleClick: PropTypes.func\n}\n\nexport default Button\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport MapsIcon from './google.svg'\n\nimport './Details.css'\n\nfunction Details(props) {\n  if (props.isRunning) return null\n\n  const price = Array(parseInt(props.details.price)).fill('ðŸ’°')\n\n  return (\n    <div>\n      <div className=\"details-wrapper\">\n        <div className=\"detail-element price\">{price}</div>\n        <div className=\"detail-element type\">{props.details.type}</div>\n        <a className=\"detail-element maps\" href={props.details.maps_url}>\n          <img className=\"maps-icon\" src={MapsIcon} alt=\"Google Maps icon\" />\n        </a>\n      </div>\n      <div className=\"play-again\" onClick={props.handleClick}>Pas convaincu? <span role=\"img\" aria-label=\"Play Again\">ðŸ”„</span></div>\n    </div>\n  )\n}\n\nDetails.propTypes = {\n  isRunning: PropTypes.bool,\n  handleClick: PropTypes.func.isRequired,\n  details: PropTypes.object\n}\n\nexport default Details\n","import React from 'react'\nimport Slider from 'react-slick'\nimport PropTypes from 'prop-types'\n\nimport Button from './Button/Button'\nimport Details from './Details/Details'\n\nimport './Restaurant.css'\n\nclass Restaurant extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      isRunning: true,\n      selectedRestaurant: null\n    }\n  }\n\n  /**\n   * Called when the slider selects a new restaurant\n   * Sets the selected restaurant in our state\n   * @param {*} index - Index of the currently selected restaurant\n   */\n  updateRestaurant(index) {\n    if (!this.props.restaurants[index]) return\n\n    const { title, type, price, maps_url } = this.props.restaurants[index];\n\n    this.setState({\n      selectedRestaurant: {\n        title: title[0] ? title[0].text : \"\",\n        type: type[0] ? type[0].text : \"\",\n        price: price,\n        maps_url: maps_url.url\n      }\n    })\n  }\n\n  /**\n   * Runs and stop the slider\n   */\n  handleClick = () => {\n    if (!this.state.selectedRestaurant) return;\n\n    this.state.isRunning ? this.slider.slickPause() : this.slider.slickPlay();\n\n    this.setState({\n      isRunning: !this.state.isRunning\n    })\n  }\n\n  render() {\n    const settings = {\n      infinite: true,\n      speed: 150,\n      autoplay: true,\n      autoplaySpeed: 100,\n      draggable: false,\n      pauseOnHover: false,\n      arrows: false,\n      accessibility: false,\n      beforeChange: (_, next) => this.updateRestaurant(next)\n    }\n\n    return (\n      <div className=\"restaurant-wrapper\">\n        <Slider ref={slider => (this.slider = slider)} {...settings} className=\"slider\">\n          {this.props.restaurants.map((restaurant) => {\n            const title = restaurant.title[0].text\n            return (\n              <div key={title}>\n                <h3 className=\"restaurant-name\">{title}</h3>\n              </div>\n            )\n          })}\n        </Slider>\n        <div className=\"arrow-up\" />\n        <Button isRunning={this.state.isRunning} handleClick={this.handleClick} />\n        <Details details={this.state.selectedRestaurant} handleClick={this.handleClick} isRunning={this.state.isRunning} />\n      </div>\n    )\n  }\n}\n\nRestaurant.propTypes = {\n  restaurants: PropTypes.array\n}\n\nexport default Restaurant\n","import React from 'react'\n\nimport './Spinner.css'\n\nfunction Spinner() {\n  return (\n    <div className=\"spinner\"></div>\n  )\n}\n\nexport default Spinner\n","import React from 'react'\n\nimport './Footer.css'\n\nfunction Footer() {\n  return (\n    <div className=\"footer-wrapper\">\n      <h3>\n        Made with â™¥ by <a className=\"footer-link\" href=\"https://twitter.com/christo_kade\">Christopher Kade</a>\n      </h3>\n    </div>\n  )\n}\n\nexport default Footer\n","import React, { Component } from 'react';\n\nimport Header from './components/Header/Header'\nimport Restaurant from './components/Restaurant/Restaurant'\nimport Spinner from './components/Spinner/Spinner'\nimport Footer from './components/Footer/Footer'\n\nimport './App.css';\n\nimport Prismic from 'prismic-javascript'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      restaurants: null\n    }\n  }\n\n  /**\n   * Shuffles our restaurant array and saves it\n   * @param {*} array \n   */\n  shuffleArray(array) {\n    let newArray = []\n\n    while (array.length !== 0) {\n      let randomIndex = Math.floor(Math.random() * array.length)\n      newArray.push(array[randomIndex])\n      array.splice(randomIndex, 1)\n    }\n\n    return newArray\n  }\n\n  /**\n   * On component mount, fetch and save the Prismic restaurant data\n   */\n  componentDidMount() {\n    Prismic.getApi(\"https://lunch-roulette.prismic.io/api/v2\").then((api) => {\n      return api.query(Prismic.Predicates.at('document.type', 'restaurant'));\n    }).then((response) => {\n      const restaurantData = response.results.map((res) => res.data)\n\n      // Shuffle the array and set it in our state\n      this.setState({\n        restaurants: this.shuffleArray(restaurantData)\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        {this.state.restaurants ? <Restaurant restaurants={this.state.restaurants} /> : <Spinner />}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}